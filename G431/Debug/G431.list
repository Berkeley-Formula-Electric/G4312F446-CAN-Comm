
G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b24  08003b24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b2c  08003b2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003b40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003b40  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f956  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e58  00000000  00000000  0002f992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000317f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de8b  00000000  00000000  00032e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc07  00000000  00000000  00050ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba14  00000000  00000000  0005e8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a2fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  0011a350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003aa8 	.word	0x08003aa8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003aa8 	.word	0x08003aa8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_FDCAN_RxFifo0Callback>:

extern UART_HandleTypeDef huart2;

uint8_t counter = 0;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b09a      	sub	sp, #104	; 0x68
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];
  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data);
 8000526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000532:	f000 fea5 	bl	8001280 <HAL_FDCAN_GetRxMessage>



  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = 0x002;
 8000536:	2302      	movs	r3, #2
 8000538:	617b      	str	r3, [r7, #20]
  tx_header.IdType = FDCAN_STANDARD_ID;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  tx_header.DataLength = FDCAN_DLC_BYTES_3;
 8000542:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000546:	623b      	str	r3, [r7, #32]
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8000548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800054e:	2300      	movs	r3, #0
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000552:	2300      	movs	r3, #0
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  tx_header.MessageMarker = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	637b      	str	r3, [r7, #52]	; 0x34

  uint8_t tx_data[8];
  tx_data[0] = counter;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	733b      	strb	r3, [r7, #12]
  tx_data[1] = 0x07;
 8000564:	2307      	movs	r3, #7
 8000566:	737b      	strb	r3, [r7, #13]
  tx_data[2] = 0x08;
 8000568:	2308      	movs	r3, #8
 800056a:	73bb      	strb	r3, [r7, #14]
  tx_data[3] = 0x09;
 800056c:	2309      	movs	r3, #9
 800056e:	73fb      	strb	r3, [r7, #15]

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, tx_data) != HAL_OK) {
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800057c:	f000 fe3c 	bl	80011f8 <HAL_FDCAN_AddMessageToTxFifoQ>
//   HAL_UART_Transmit(&huart2, (uint8_t *) "CAN TX Error\r\n", strlen("CAN TX Error\r\n"), 100);
  }
}
 8000580:	bf00      	nop
 8000582:	3768      	adds	r7, #104	; 0x68
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000028 	.word	0x20000028

08000590 <APP_init>:



void APP_init() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 800059e:	2302      	movs	r3, #2
 80005a0:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005a2:	2301      	movs	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <APP_init+0x54>)
 80005b4:	f000 fd9e 	bl	80010f4 <HAL_FDCAN_ConfigFilter>

if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <APP_init+0x54>)
 80005ba:	f000 fdf5 	bl	80011a8 <HAL_FDCAN_Start>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <APP_init+0x42>
    while (1)
    HAL_UART_Transmit(&huart2, (uint8_t *) "CAN init Error\r\n", strlen("CAN init Error\r\n"), 100);
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2210      	movs	r2, #16
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <APP_init+0x58>)
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <APP_init+0x5c>)
 80005cc:	f002 fc26 	bl	8002e1c <HAL_UART_Transmit>
 80005d0:	e7f8      	b.n	80005c4 <APP_init+0x34>
  }

  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <APP_init+0x54>)
 80005d8:	f000 ff2c 	bl	8001434 <HAL_FDCAN_ActivateNotification>

}
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	08003ac0 	.word	0x08003ac0
 80005ec:	20000090 	.word	0x20000090

080005f0 <APP_main>:

void APP_main() {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0



//  HAL_UART_Transmit(&huart2, (uint8_t *) "loop\r\n", strlen("loop\r\n"), 100);

  counter += 1;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <APP_main+0x1c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <APP_main+0x1c>)
 80005fe:	701a      	strb	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fa93 	bl	8000b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80b 	bl	8000632 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8e6 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f898 	bl	8000754 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000624:	f000 f850 	bl	80006c8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000628:	f7ff ffb2 	bl	8000590 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 800062c:	f7ff ffe0 	bl	80005f0 <APP_main>
 8000630:	e7fc      	b.n	800062c <main+0x1c>

08000632 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b094      	sub	sp, #80	; 0x50
 8000636:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	2238      	movs	r2, #56	; 0x38
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fa29 	bl	8003a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000654:	2000      	movs	r0, #0
 8000656:	f001 fbc9 	bl	8001dec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000670:	2301      	movs	r3, #1
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000674:	2314      	movs	r3, #20
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fc53 	bl	8001f34 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000694:	f000 f8ce 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2104      	movs	r1, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 ff57 	bl	8002564 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006bc:	f000 f8ba 	bl	8000834 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_FDCAN1_Init+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006f8:	2210      	movs	r2, #16
 80006fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006fe:	2201      	movs	r2, #1
 8000700:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000704:	2207      	movs	r2, #7
 8000706:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_FDCAN1_Init+0x84>)
 800070a:	2202      	movs	r2, #2
 800070c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000710:	2201      	movs	r2, #1
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000716:	2201      	movs	r2, #1
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_FDCAN1_Init+0x84>)
 800071c:	2201      	movs	r2, #1
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000722:	2201      	movs	r2, #1
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_FDCAN1_Init+0x84>)
 800072e:	2200      	movs	r2, #0
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_FDCAN1_Init+0x84>)
 800073a:	f000 fb81 	bl	8000e40 <HAL_FDCAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000744:	f000 f876 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000002c 	.word	0x2000002c
 8000750:	40006400 	.word	0x40006400

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <MX_USART2_UART_Init+0x94>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 800079e:	f002 faed 	bl	8002d7c <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f844 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007b0:	f003 f884 	bl	80038bc <HAL_UARTEx_SetTxFifoThreshold>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 f83b 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007c2:	f003 f8b9 	bl	8003938 <HAL_UARTEx_SetRxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f832 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_USART2_UART_Init+0x90>)
 80007d2:	f003 f83a 	bl	800384a <HAL_UARTEx_DisableFifoMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f82a 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000090 	.word	0x20000090
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_GPIO_Init+0x44>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <MX_GPIO_Init+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_GPIO_Init+0x44>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0x44>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0x44>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0x44>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6613      	str	r3, [r2, #96]	; 0x60
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6593      	str	r3, [r2, #88]	; 0x58
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x44>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b09c      	sub	sp, #112	; 0x70
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	2244      	movs	r2, #68	; 0x44
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 f8f5 	bl	8003a98 <memset>
  if(hfdcan->Instance==FDCAN1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a37      	ldr	r2, [pc, #220]	; (8000990 <HAL_FDCAN_MspInit+0x108>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d166      	bne.n	8000986 <HAL_FDCAN_MspInit+0xfe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 f867 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008d4:	f7ff ffae 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008d8:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008dc:	4a2d      	ldr	r2, [pc, #180]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	6593      	str	r3, [r2, #88]	; 0x58
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <HAL_FDCAN_MspInit+0x10c>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000924:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000932:	2309      	movs	r3, #9
 8000934:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f001 f8d2 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000956:	2309      	movs	r3, #9
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095e:	4619      	mov	r1, r3
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <HAL_FDCAN_MspInit+0x110>)
 8000962:	f001 f8c1 	bl	8001ae8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2015      	movs	r0, #21
 800096c:	f000 fa33 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000970:	2015      	movs	r0, #21
 8000972:	f000 fa4a 	bl	8000e0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2016      	movs	r0, #22
 800097c:	f000 fa2b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000980:	2016      	movs	r0, #22
 8000982:	f000 fa42 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3770      	adds	r7, #112	; 0x70
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40006400 	.word	0x40006400
 8000994:	40021000 	.word	0x40021000
 8000998:	48000400 	.word	0x48000400

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09a      	sub	sp, #104	; 0x68
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2244      	movs	r2, #68	; 0x44
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f86b 	bl	8003a98 <memset>
  if(huart->Instance==USART2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <HAL_UART_MspInit+0xa4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d135      	bne.n	8000a38 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 ffdf 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ff26 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6593      	str	r3, [r2, #88]	; 0x58
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_UART_MspInit+0xa8>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a18:	2318      	movs	r3, #24
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_UART_MspInit+0xac>)
 8000a34:	f001 f858 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3768      	adds	r7, #104	; 0x68
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f8a4 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000aa6:	f000 fdab 	bl	8001600 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <FDCAN1_IT1_IRQHandler+0x10>)
 8000aba:	f000 fda1 	bl	8001600 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000002c 	.word	0x2000002c

08000ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f002 ff99 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fd77 	bl	8000610 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   r0, =_estack
 8000b24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	20000124 	.word	0x20000124

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>

08000b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f939 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f80e 	bl	8000b70 <HAL_InitTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e001      	b.n	8000b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b60:	f7ff fe6e 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b64:	79fb      	ldrb	r3, [r7, #7]

}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d022      	beq.n	8000bca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f944 	bl	8000e26 <HAL_SYSTICK_Config>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d809      	bhi.n	8000bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f000 f910 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20000120 	.word	0x20000120
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000120 	.word	0x20000120

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff40 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff33 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa4 	bl	8000d7c <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e147      	b.n	80010e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d106      	bne.n	8000e6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fd0e 	bl	8000888 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0210 	bic.w	r2, r2, #16
 8000e7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7c:	f7ff fec4 	bl	8000c08 <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e82:	e012      	b.n	8000eaa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e84:	f7ff fec0 	bl	8000c08 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90b      	bls.n	8000eaa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e11b      	b.n	80010e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d0e5      	beq.n	8000e84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff fe9e 	bl	8000c08 <HAL_GetTick>
 8000ecc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ece:	e012      	b.n	8000ef6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ed0:	f7ff fe9a 	bl	8000c08 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d90b      	bls.n	8000ef6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0f5      	b.n	80010e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0e5      	beq.n	8000ed0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a74      	ldr	r2, [pc, #464]	; (80010ec <HAL_FDCAN_Init+0x2ac>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d103      	bne.n	8000f26 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f1e:	4a74      	ldr	r2, [pc, #464]	; (80010f0 <HAL_FDCAN_Init+0x2b0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7c1b      	ldrb	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	e007      	b.n	8000f50 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	699a      	ldr	r2, [r3, #24]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7c5b      	ldrb	r3, [r3, #17]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	699a      	ldr	r2, [r3, #24]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	e007      	b.n	8000f7a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	699a      	ldr	r2, [r3, #24]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f78:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7c9b      	ldrb	r3, [r3, #18]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f90:	619a      	str	r2, [r3, #24]
 8000f92:	e007      	b.n	8000fa4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fa2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000fc8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0210 	bic.w	r2, r2, #16
 8000fd8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d108      	bne.n	8000ff4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 0204 	orr.w	r2, r2, #4
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	e02c      	b.n	800104e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d028      	beq.n	800104e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d01c      	beq.n	800103e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001012:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0210 	orr.w	r2, r2, #16
 8001022:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d110      	bne.n	800104e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	e007      	b.n	800104e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	699a      	ldr	r2, [r3, #24]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0220 	orr.w	r2, r2, #32
 800104c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	3b01      	subs	r3, #1
 8001054:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	3b01      	subs	r3, #1
 800105c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800105e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001066:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	3b01      	subs	r3, #1
 8001070:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001076:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001078:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001082:	d115      	bne.n	80010b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	3b01      	subs	r3, #1
 8001090:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001092:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	3b01      	subs	r3, #1
 800109a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800109c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	3b01      	subs	r3, #1
 80010a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc3c 	bl	8001944 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40006400 	.word	0x40006400
 80010f0:	40006500 	.word	0x40006500

080010f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001104:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d002      	beq.n	8001112 <HAL_FDCAN_ConfigFilter+0x1e>
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d13d      	bne.n	800118e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d119      	bne.n	800114e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001126:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800112e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e01d      	b.n	800118a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	075a      	lsls	r2, r3, #29
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	079a      	lsls	r2, r3, #30
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3304      	adds	r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e006      	b.n	800119c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f043 0202 	orr.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
  }
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d110      	bne.n	80011de <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e006      	b.n	80011ec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	f043 0204 	orr.w	r2, r3, #4
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
  }
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d12c      	bne.n	800126a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e023      	b.n	8001278 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001238:	0c1b      	lsrs	r3, r3, #16
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fbd2 	bl	80019f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800125c:	2201      	movs	r2, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	409a      	lsls	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e006      	b.n	8001278 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f043 0208 	orr.w	r2, r3, #8
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001280:	b480      	push	{r7}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001294:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	2b02      	cmp	r3, #2
 800129a:	f040 80bc 	bne.w	8001416 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b40      	cmp	r3, #64	; 0x40
 80012a2:	d121      	bne.n	80012e8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d107      	bne.n	80012c4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0af      	b.n	8001424 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e020      	b.n	800132a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e08d      	b.n	8001424 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e005      	b.n	800135a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	3304      	adds	r3, #4
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0e1b      	lsrs	r3, r3, #24
 80013ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0fda      	lsrs	r2, r3, #31
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	3304      	adds	r3, #4
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	e00a      	b.n	80013e4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	441a      	add	r2, r3
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	440b      	add	r3, r1
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	3301      	adds	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	461a      	mov	r2, r3
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d3eb      	bcc.n	80013ce <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b40      	cmp	r3, #64	; 0x40
 80013fa:	d105      	bne.n	8001408 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001406:	e004      	b.n	8001412 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e006      	b.n	8001424 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f043 0208 	orr.w	r2, r3, #8
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	372c      	adds	r7, #44	; 0x2c
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	08003aec 	.word	0x08003aec

08001434 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001446:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d003      	beq.n	8001456 <HAL_FDCAN_ActivateNotification+0x22>
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b02      	cmp	r3, #2
 8001452:	f040 80c8 	bne.w	80015e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03b      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d031      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d027      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01d      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d013      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0201 	orr.w	r2, r2, #1
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d13b      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d131      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d127      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11d      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d113      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00c      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0202 	orr.w	r2, r2, #2
 8001594:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	430a      	orrs	r2, r1
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e006      	b.n	80015f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800160e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	4013      	ands	r3, r2
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	6a3a      	ldr	r2, [r7, #32]
 8001634:	4013      	ands	r3, r2
 8001636:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001642:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800165a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001672:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4013      	ands	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00d      	beq.n	80016aa <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f92e 	bl	8001906 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d014      	beq.n	80016f0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016ce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80016e8:	6939      	ldr	r1, [r7, #16]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8ec 	bl	80018c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80016fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f8b6 	bl	8001872 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff00 	bl	800051c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800172a:	69f9      	ldr	r1, [r7, #28]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8ab 	bl	8001888 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001756:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f8a0 	bl	800189e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01a      	beq.n	80017a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d013      	beq.n	80017a2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001782:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f888 	bl	80018b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f888 	bl	80018de <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f87c 	bl	80018f2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d011      	beq.n	800182c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f876 	bl	800192e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f858 	bl	800191a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800194e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001984:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	061a      	lsls	r2, r3, #24
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e005      	b.n	80019d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3304      	adds	r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3f3      	bcc.n	80019c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	4000a400 	.word	0x4000a400

080019f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001a0e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e00a      	b.n	8001a32 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001a24:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001a2a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a30:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a3c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001a42:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001a48:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e020      	b.n	8001ac4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3303      	adds	r3, #3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3302      	adds	r3, #2
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	440b      	add	r3, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a9a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001aa8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	440a      	add	r2, r1
 8001ab0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ab2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	3304      	adds	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d3d5      	bcc.n	8001a82 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	08003aec 	.word	0x08003aec

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001af6:	e15a      	b.n	8001dae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 814c 	beq.w	8001da8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d005      	beq.n	8001b28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d130      	bne.n	8001b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5e:	2201      	movs	r2, #1
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 0201 	and.w	r2, r3, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d017      	beq.n	8001bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d123      	bne.n	8001c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	6939      	ldr	r1, [r7, #16]
 8001c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0203 	and.w	r2, r3, #3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80a6 	beq.w	8001da8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c60:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6613      	str	r3, [r2, #96]	; 0x60
 8001c68:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c74:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9e:	d01f      	beq.n	8001ce0 <HAL_GPIO_Init+0x1f8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d019      	beq.n	8001cdc <HAL_GPIO_Init+0x1f4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1f0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x2f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2f8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cc8:	2305      	movs	r3, #5
 8001cca:	e00a      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001ccc:	2306      	movs	r3, #6
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d24:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f ae9d 	bne.w	8001af8 <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d141      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d131      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e08:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e0e:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e20:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2232      	movs	r2, #50	; 0x32
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	4a3f      	ldr	r2, [pc, #252]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3e:	e002      	b.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e52:	d102      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f2      	bne.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d158      	bne.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e057      	b.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e72:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e7c:	e04d      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e84:	d141      	bne.n	8001f0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d131      	bne.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2232      	movs	r2, #50	; 0x32
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eca:	e002      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d102      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f2      	bne.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d112      	bne.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e011      	b.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f08:	e007      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	431bde83 	.word	0x431bde83

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e306      	b.n	8002554 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d075      	beq.n	800203e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b97      	ldr	r3, [pc, #604]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5c:	4b94      	ldr	r3, [pc, #592]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3e>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_OscConfig+0x44>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d10b      	bne.n	8001f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05b      	beq.n	800203c <HAL_RCC_OscConfig+0x108>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d157      	bne.n	800203c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e2e1      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x74>
 8001f9a:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a84      	ldr	r2, [pc, #528]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e01d      	b.n	8001fe4 <HAL_RCC_OscConfig+0xb0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x98>
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0xb0>
 8001fcc:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a74      	ldr	r2, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fe0c 	bl	8000c08 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fe08 	bl	8000c08 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e2a6      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002006:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xc0>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fdf8 	bl	8000c08 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7fe fdf4 	bl	8000c08 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e292      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202e:	4b60      	ldr	r3, [pc, #384]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0xe8>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d075      	beq.n	8002136 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204a:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0x136>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d002      	beq.n	8002070 <HAL_RCC_OscConfig+0x13c>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11f      	bne.n	80020b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_OscConfig+0x154>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e265      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	4946      	ldr	r1, [pc, #280]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fd65 	bl	8000b70 <HAL_InitTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d043      	beq.n	8002134 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e251      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fda0 	bl	8000c08 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7fe fd9c 	bl	8000c08 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e23a      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	492d      	ldr	r1, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
 80020fe:	e01a      	b.n	8002136 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fd7c 	bl	8000c08 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fd78 	bl	8000c08 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e216      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1e0>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d041      	beq.n	80021c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01c      	beq.n	8002184 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 800214c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7fe fd55 	bl	8000c08 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002162:	f7fe fd51 	bl	8000c08 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1ef      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ef      	beq.n	8002162 <HAL_RCC_OscConfig+0x22e>
 8002182:	e020      	b.n	80021c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe fd38 	bl	8000c08 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe fd34 	bl	8000c08 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d906      	bls.n	80021b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1d2      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b8:	4b8c      	ldr	r3, [pc, #560]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ea      	bne.n	800219c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80a6 	beq.w	8002320 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d8:	4b84      	ldr	r3, [pc, #528]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2b4>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x2b6>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
 80021fa:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220a:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe fcf1 	bl	8000c08 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe fced 	bl	8000c08 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e18b      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d108      	bne.n	8002262 <HAL_RCC_OscConfig+0x32e>
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002260:	e024      	b.n	80022ac <HAL_RCC_OscConfig+0x378>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d110      	bne.n	800228c <HAL_RCC_OscConfig+0x358>
 800226a:	4b60      	ldr	r3, [pc, #384]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228a:	e00f      	b.n	80022ac <HAL_RCC_OscConfig+0x378>
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7fe fca8 	bl	8000c08 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe fca4 	bl	8000c08 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e140      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ed      	beq.n	80022bc <HAL_RCC_OscConfig+0x388>
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7fe fc91 	bl	8000c08 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fc8d 	bl	8000c08 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e129      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ed      	bne.n	80022ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230e:	7ffb      	ldrb	r3, [r7, #31]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01c      	beq.n	800236e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233a:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe fc60 	bl	8000c08 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800234c:	f7fe fc5c 	bl	8000c08 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0fa      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002360:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ef      	beq.n	800234c <HAL_RCC_OscConfig+0x418>
 800236c:	e01b      	b.n	80023a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7fe fc43 	bl	8000c08 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002386:	f7fe fc3f 	bl	8000c08 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0dd      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ef      	bne.n	8002386 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80d1 	beq.w	8002552 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	f000 808b 	beq.w	80024d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d15e      	bne.n	8002484 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fc19 	bl	8000c08 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	e00c      	b.n	80023f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fc15 	bl	8000c08 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d905      	bls.n	80023f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0b3      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_OscConfig+0x628>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ec      	bne.n	80023da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HAL_RCC_OscConfig+0x62c>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a11      	ldr	r1, [r2, #32]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002410:	3a01      	subs	r2, #1
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800241a:	0212      	lsls	r2, r2, #8
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002422:	0852      	lsrs	r2, r2, #1
 8002424:	3a01      	subs	r2, #1
 8002426:	0552      	lsls	r2, r2, #21
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242e:	0852      	lsrs	r2, r2, #1
 8002430:	3a01      	subs	r2, #1
 8002432:	0652      	lsls	r2, r2, #25
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800243a:	06d2      	lsls	r2, r2, #27
 800243c:	430a      	orrs	r2, r1
 800243e:	4947      	ldr	r1, [pc, #284]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a44      	ldr	r2, [pc, #272]	; (800255c <HAL_RCC_OscConfig+0x628>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a41      	ldr	r2, [pc, #260]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fbd4 	bl	8000c08 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fbd0 	bl	8000c08 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e06e      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x530>
 8002482:	e066      	b.n	8002552 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_RCC_OscConfig+0x628>)
 800248a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_OscConfig+0x628>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a2e      	ldr	r2, [pc, #184]	; (800255c <HAL_RCC_OscConfig+0x628>)
 80024a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fbac 	bl	8000c08 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fba8 	bl	8000c08 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e046      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_RCC_OscConfig+0x628>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x580>
 80024d2:	e03e      	b.n	8002552 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e039      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_OscConfig+0x628>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d12c      	bne.n	800254e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	3b01      	subs	r3, #1
 8002500:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d123      	bne.n	800254e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d11b      	bne.n	800254e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d113      	bne.n	800254e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d109      	bne.n	800254e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	019f800c 	.word	0x019f800c

08002564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e11e      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	498c      	ldr	r1, [pc, #560]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b8a      	ldr	r3, [pc, #552]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e106      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d073      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0f4      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025d0:	f000 f99e 	bl	8002910 <RCC_GetSysClockFreqFromPLLSource>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <HAL_RCC_ClockConfig+0x268>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d93f      	bls.n	800265e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d033      	beq.n	800265e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12f      	bne.n	800265e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002606:	4a70      	ldr	r2, [pc, #448]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e024      	b.n	800265e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0c6      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0be      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800263c:	f000 f8ce 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a61      	ldr	r2, [pc, #388]	; (80027cc <HAL_RCC_ClockConfig+0x268>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d909      	bls.n	800265e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002658:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4957      	ldr	r1, [pc, #348]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe faca 	bl	8000c08 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fac6 	bl	8000c08 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e095      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026d8:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4936      	ldr	r1, [pc, #216]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
 80026f2:	e008      	b.n	8002706 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002704:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d21d      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 020f 	bic.w	r2, r3, #15
 800271c:	4929      	ldr	r1, [pc, #164]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002724:	f7fe fa70 	bl	8000c08 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fa6c 	bl	8000c08 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e03b      	b.n	80027ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d1ed      	bne.n	800272c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4917      	ldr	r1, [pc, #92]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490f      	ldr	r1, [pc, #60]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800278e:	f000 f825 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490c      	ldr	r1, [pc, #48]	; (80027d0 <HAL_RCC_ClockConfig+0x26c>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x270>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe f9dc 	bl	8000b70 <HAL_InitTick>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	04c4b400 	.word	0x04c4b400
 80027d0:	08003ad4 	.word	0x08003ad4
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	e047      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	e03e      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d136      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3301      	adds	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10c      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283a:	68d2      	ldr	r2, [r2, #12]
 800283c:	0a12      	lsrs	r2, r2, #8
 800283e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	617b      	str	r3, [r7, #20]
      break;
 8002848:	e00c      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	0a12      	lsrs	r2, r2, #8
 8002858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
      break;
 8002862:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0e5b      	lsrs	r3, r3, #25
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	e001      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	4618      	mov	r0, r3
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08003ae4 	.word	0x08003ae4

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028e8:	f7ff ffda 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0adb      	lsrs	r3, r3, #11
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4904      	ldr	r1, [pc, #16]	; (800290c <HAL_RCC_GetPCLK2Freq+0x28>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	08003ae4 	.word	0x08003ae4

08002910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d10c      	bne.n	800294e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800293e:	68d2      	ldr	r2, [r2, #12]
 8002940:	0a12      	lsrs	r2, r2, #8
 8002942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
    break;
 800294c:	e00c      	b.n	8002968 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	0a12      	lsrs	r2, r2, #8
 800295c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    break;
 8002966:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0e5b      	lsrs	r3, r3, #25
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002982:	687b      	ldr	r3, [r7, #4]
}
 8002984:	4618      	mov	r0, r3
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	00f42400 	.word	0x00f42400

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029a4:	2300      	movs	r3, #0
 80029a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a8:	2300      	movs	r3, #0
 80029aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8098 	beq.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029be:	4b43      	ldr	r3, [pc, #268]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e2:	2301      	movs	r3, #1
 80029e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e6:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a39      	ldr	r2, [pc, #228]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f2:	f7fe f909 	bl	8000c08 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f8:	e009      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe f905 	bl	8000c08 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a0c:	e005      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ef      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d159      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01e      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a68:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe f8c5 	bl	8000c08 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	e00b      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe f8c1 	bl	8000c08 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d902      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	74fb      	strb	r3, [r7, #19]
            break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ec      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
 8002aca:	e005      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad8:	7c7b      	ldrb	r3, [r7, #17]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4ba6      	ldr	r3, [pc, #664]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4aa5      	ldr	r2, [pc, #660]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af6:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 0203 	bic.w	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	499c      	ldr	r1, [pc, #624]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b18:	4b97      	ldr	r3, [pc, #604]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 020c 	bic.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4994      	ldr	r1, [pc, #592]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3a:	4b8f      	ldr	r3, [pc, #572]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	498b      	ldr	r1, [pc, #556]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5c:	4b86      	ldr	r3, [pc, #536]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4983      	ldr	r1, [pc, #524]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7e:	4b7e      	ldr	r3, [pc, #504]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	497a      	ldr	r1, [pc, #488]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	4972      	ldr	r1, [pc, #456]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4969      	ldr	r1, [pc, #420]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4961      	ldr	r1, [pc, #388]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	4958      	ldr	r1, [pc, #352]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	4950      	ldr	r1, [pc, #320]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c60:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4942      	ldr	r1, [pc, #264]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	4926      	ldr	r1, [pc, #152]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	4918      	ldr	r1, [pc, #96]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e042      	b.n	8002e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fdfb 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8c2 	bl	8002f48 <UART_SetConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fb82 	bl	80034e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fc09 	bl	8003624 <UART_CheckIdleState>
 8002e12:	4603      	mov	r3, r0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 8083 	bne.w	8002f3e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Transmit+0x28>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e07b      	b.n	8002f40 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Transmit+0x3a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e074      	b.n	8002f40 <HAL_UART_Transmit+0x124>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	; 0x21
 8002e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6e:	f7fd fecb 	bl	8000c08 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8c:	d108      	bne.n	8002ea0 <HAL_UART_Transmit+0x84>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e003      	b.n	8002ea8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002eb0:	e02c      	b.n	8002f0c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fbfc 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e039      	b.n	8002f40 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e007      	b.n	8002efa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1cc      	bne.n	8002eb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2140      	movs	r1, #64	; 0x40
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fbc9 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e006      	b.n	8002f40 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b08c      	sub	sp, #48	; 0x30
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4bab      	ldr	r3, [pc, #684]	; (8003224 <UART_SetConfig+0x2dc>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4aa0      	ldr	r2, [pc, #640]	; (8003228 <UART_SetConfig+0x2e0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	f023 010f 	bic.w	r1, r3, #15
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a91      	ldr	r2, [pc, #580]	; (800322c <UART_SetConfig+0x2e4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d125      	bne.n	8003038 <UART_SetConfig+0xf0>
 8002fec:	4b90      	ldr	r3, [pc, #576]	; (8003230 <UART_SetConfig+0x2e8>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d81a      	bhi.n	8003030 <UART_SetConfig+0xe8>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0xb8>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003011 	.word	0x08003011
 8003004:	08003021 	.word	0x08003021
 8003008:	08003019 	.word	0x08003019
 800300c:	08003029 	.word	0x08003029
 8003010:	2301      	movs	r3, #1
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003016:	e0d6      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003018:	2302      	movs	r3, #2
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301e:	e0d2      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003020:	2304      	movs	r3, #4
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003026:	e0ce      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003028:	2308      	movs	r3, #8
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302e:	e0ca      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003030:	2310      	movs	r3, #16
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003036:	e0c6      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7d      	ldr	r2, [pc, #500]	; (8003234 <UART_SetConfig+0x2ec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d138      	bne.n	80030b4 <UART_SetConfig+0x16c>
 8003042:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <UART_SetConfig+0x2e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d82d      	bhi.n	80030ac <UART_SetConfig+0x164>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <UART_SetConfig+0x110>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	0800308d 	.word	0x0800308d
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ad 	.word	0x080030ad
 8003064:	080030ad 	.word	0x080030ad
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	08003095 	.word	0x08003095
 800307c:	080030ad 	.word	0x080030ad
 8003080:	080030ad 	.word	0x080030ad
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030a5 	.word	0x080030a5
 800308c:	2300      	movs	r3, #0
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003092:	e098      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800309a:	e094      	b.n	80031c6 <UART_SetConfig+0x27e>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a2:	e090      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030aa:	e08c      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b2:	e088      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5f      	ldr	r2, [pc, #380]	; (8003238 <UART_SetConfig+0x2f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d125      	bne.n	800310a <UART_SetConfig+0x1c2>
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <UART_SetConfig+0x2e8>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d016      	beq.n	80030fa <UART_SetConfig+0x1b2>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d818      	bhi.n	8003102 <UART_SetConfig+0x1ba>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d00a      	beq.n	80030ea <UART_SetConfig+0x1a2>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d814      	bhi.n	8003102 <UART_SetConfig+0x1ba>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <UART_SetConfig+0x19a>
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d008      	beq.n	80030f2 <UART_SetConfig+0x1aa>
 80030e0:	e00f      	b.n	8003102 <UART_SetConfig+0x1ba>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e8:	e06d      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f0:	e069      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030f2:	2304      	movs	r3, #4
 80030f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f8:	e065      	b.n	80031c6 <UART_SetConfig+0x27e>
 80030fa:	2308      	movs	r3, #8
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003100:	e061      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003102:	2310      	movs	r3, #16
 8003104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003108:	e05d      	b.n	80031c6 <UART_SetConfig+0x27e>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4b      	ldr	r2, [pc, #300]	; (800323c <UART_SetConfig+0x2f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d125      	bne.n	8003160 <UART_SetConfig+0x218>
 8003114:	4b46      	ldr	r3, [pc, #280]	; (8003230 <UART_SetConfig+0x2e8>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800311e:	2bc0      	cmp	r3, #192	; 0xc0
 8003120:	d016      	beq.n	8003150 <UART_SetConfig+0x208>
 8003122:	2bc0      	cmp	r3, #192	; 0xc0
 8003124:	d818      	bhi.n	8003158 <UART_SetConfig+0x210>
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d00a      	beq.n	8003140 <UART_SetConfig+0x1f8>
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d814      	bhi.n	8003158 <UART_SetConfig+0x210>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <UART_SetConfig+0x1f0>
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d008      	beq.n	8003148 <UART_SetConfig+0x200>
 8003136:	e00f      	b.n	8003158 <UART_SetConfig+0x210>
 8003138:	2300      	movs	r3, #0
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e042      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003140:	2302      	movs	r3, #2
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e03e      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003148:	2304      	movs	r3, #4
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e03a      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003150:	2308      	movs	r3, #8
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003156:	e036      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003158:	2310      	movs	r3, #16
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315e:	e032      	b.n	80031c6 <UART_SetConfig+0x27e>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a30      	ldr	r2, [pc, #192]	; (8003228 <UART_SetConfig+0x2e0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d12a      	bne.n	80031c0 <UART_SetConfig+0x278>
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <UART_SetConfig+0x2e8>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003178:	d01a      	beq.n	80031b0 <UART_SetConfig+0x268>
 800317a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800317e:	d81b      	bhi.n	80031b8 <UART_SetConfig+0x270>
 8003180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003184:	d00c      	beq.n	80031a0 <UART_SetConfig+0x258>
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d815      	bhi.n	80031b8 <UART_SetConfig+0x270>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <UART_SetConfig+0x250>
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d008      	beq.n	80031a8 <UART_SetConfig+0x260>
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x270>
 8003198:	2300      	movs	r3, #0
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e012      	b.n	80031c6 <UART_SetConfig+0x27e>
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a6:	e00e      	b.n	80031c6 <UART_SetConfig+0x27e>
 80031a8:	2304      	movs	r3, #4
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ae:	e00a      	b.n	80031c6 <UART_SetConfig+0x27e>
 80031b0:	2308      	movs	r3, #8
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b6:	e006      	b.n	80031c6 <UART_SetConfig+0x27e>
 80031b8:	2310      	movs	r3, #16
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031be:	e002      	b.n	80031c6 <UART_SetConfig+0x27e>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <UART_SetConfig+0x2e0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f040 80a8 	bne.w	8003322 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d834      	bhi.n	8003244 <UART_SetConfig+0x2fc>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <UART_SetConfig+0x298>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	08003205 	.word	0x08003205
 80031e4:	08003245 	.word	0x08003245
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003213 	.word	0x08003213
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003245 	.word	0x08003245
 8003200:	0800321b 	.word	0x0800321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003204:	f7ff fb58 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800320a:	e021      	b.n	8003250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <UART_SetConfig+0x2f8>)
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003210:	e01e      	b.n	8003250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003212:	f7ff fae3 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8003216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003218:	e01a      	b.n	8003250 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003220:	e016      	b.n	8003250 <UART_SetConfig+0x308>
 8003222:	bf00      	nop
 8003224:	cfff69f3 	.word	0xcfff69f3
 8003228:	40008000 	.word	0x40008000
 800322c:	40013800 	.word	0x40013800
 8003230:	40021000 	.word	0x40021000
 8003234:	40004400 	.word	0x40004400
 8003238:	40004800 	.word	0x40004800
 800323c:	40004c00 	.word	0x40004c00
 8003240:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800324e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 812a 	beq.w	80034ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	4a9e      	ldr	r2, [pc, #632]	; (80034d8 <UART_SetConfig+0x590>)
 800325e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003262:	461a      	mov	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	fbb3 f3f2 	udiv	r3, r3, r2
 800326a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	429a      	cmp	r2, r3
 800327a:	d305      	bcc.n	8003288 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	429a      	cmp	r2, r3
 8003286:	d903      	bls.n	8003290 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800328e:	e10d      	b.n	80034ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	4a8e      	ldr	r2, [pc, #568]	; (80034d8 <UART_SetConfig+0x590>)
 800329e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032b2:	f7fc ffb1 	bl	8000218 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	020b      	lsls	r3, r1, #8
 80032c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032cc:	0202      	lsls	r2, r0, #8
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	6849      	ldr	r1, [r1, #4]
 80032d2:	0849      	lsrs	r1, r1, #1
 80032d4:	2000      	movs	r0, #0
 80032d6:	460c      	mov	r4, r1
 80032d8:	4605      	mov	r5, r0
 80032da:	eb12 0804 	adds.w	r8, r2, r4
 80032de:	eb43 0905 	adc.w	r9, r3, r5
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	469a      	mov	sl, r3
 80032ea:	4693      	mov	fp, r2
 80032ec:	4652      	mov	r2, sl
 80032ee:	465b      	mov	r3, fp
 80032f0:	4640      	mov	r0, r8
 80032f2:	4649      	mov	r1, r9
 80032f4:	f7fc ff90 	bl	8000218 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4613      	mov	r3, r2
 80032fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003306:	d308      	bcc.n	800331a <UART_SetConfig+0x3d2>
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330e:	d204      	bcs.n	800331a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e0c8      	b.n	80034ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003320:	e0c4      	b.n	80034ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d167      	bne.n	80033fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800332c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003330:	2b08      	cmp	r3, #8
 8003332:	d828      	bhi.n	8003386 <UART_SetConfig+0x43e>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <UART_SetConfig+0x3f4>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003361 	.word	0x08003361
 8003340:	08003369 	.word	0x08003369
 8003344:	08003371 	.word	0x08003371
 8003348:	08003387 	.word	0x08003387
 800334c:	08003377 	.word	0x08003377
 8003350:	08003387 	.word	0x08003387
 8003354:	08003387 	.word	0x08003387
 8003358:	08003387 	.word	0x08003387
 800335c:	0800337f 	.word	0x0800337f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7ff faaa 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003366:	e014      	b.n	8003392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7ff fabc 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800336e:	e010      	b.n	8003392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <UART_SetConfig+0x594>)
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003374:	e00d      	b.n	8003392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7ff fa31 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800337a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800337c:	e009      	b.n	8003392 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003384:	e005      	b.n	8003392 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4a4e      	ldr	r2, [pc, #312]	; (80034d8 <UART_SetConfig+0x590>)
 80033a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ac:	005a      	lsls	r2, r3, #1
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	441a      	add	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	d916      	bls.n	80033f4 <UART_SetConfig+0x4ac>
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d212      	bcs.n	80033f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	8bfb      	ldrh	r3, [r7, #30]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	8bfa      	ldrh	r2, [r7, #30]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	e05b      	b.n	80034ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033fa:	e057      	b.n	80034ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003400:	2b08      	cmp	r3, #8
 8003402:	d828      	bhi.n	8003456 <UART_SetConfig+0x50e>
 8003404:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0x4c4>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003431 	.word	0x08003431
 8003410:	08003439 	.word	0x08003439
 8003414:	08003441 	.word	0x08003441
 8003418:	08003457 	.word	0x08003457
 800341c:	08003447 	.word	0x08003447
 8003420:	08003457 	.word	0x08003457
 8003424:	08003457 	.word	0x08003457
 8003428:	08003457 	.word	0x08003457
 800342c:	0800344f 	.word	0x0800344f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff fa42 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003436:	e014      	b.n	8003462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003438:	f7ff fa54 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800343e:	e010      	b.n	8003462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003440:	4b26      	ldr	r3, [pc, #152]	; (80034dc <UART_SetConfig+0x594>)
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003444:	e00d      	b.n	8003462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003446:	f7ff f9c9 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800344c:	e009      	b.n	8003462 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003460:	bf00      	nop
    }

    if (pclk != 0U)
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d021      	beq.n	80034ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <UART_SetConfig+0x590>)
 800346e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003472:	461a      	mov	r2, r3
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	fbb3 f2f2 	udiv	r2, r3, r2
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	441a      	add	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	d909      	bls.n	80034a6 <UART_SetConfig+0x55e>
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d205      	bcs.n	80034a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	b29a      	uxth	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e002      	b.n	80034ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2200      	movs	r2, #0
 80034c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80034c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	08003afc 	.word	0x08003afc
 80034dc:	00f42400 	.word	0x00f42400

080034e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d10a      	bne.n	80035f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003634:	f7fd fae8 	bl	8000c08 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d10e      	bne.n	8003666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f82f 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e025      	b.n	80036b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d10e      	bne.n	8003692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f819 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00f      	b.n	80036b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b09c      	sub	sp, #112	; 0x70
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ca:	e0a9      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	f000 80a5 	beq.w	8003820 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fa97 	bl	8000c08 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <UART_WaitOnFlagUntilTimeout+0x32>
 80036e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d140      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003700:	667b      	str	r3, [r7, #100]	; 0x64
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800370c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3308      	adds	r3, #8
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	663b      	str	r3, [r7, #96]	; 0x60
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800373e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e5      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e069      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d051      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d149      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	613b      	str	r3, [r7, #16]
   return(result);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037e8:	623a      	str	r2, [r7, #32]
 80037ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69f9      	ldr	r1, [r7, #28]
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e010      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	f43f af46 	beq.w	80036cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3770      	adds	r7, #112	; 0x70
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UARTEx_DisableFifoMode+0x16>
 800385c:	2302      	movs	r3, #2
 800385e:	e027      	b.n	80038b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800388e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e02d      	b.n	8003930 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f84f 	bl	80039b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800394c:	2302      	movs	r3, #2
 800394e:	e02d      	b.n	80039ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f811 	bl	80039b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039d4:	e031      	b.n	8003a3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039d6:	2308      	movs	r3, #8
 80039d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039da:	2308      	movs	r3, #8
 80039dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	0e5b      	lsrs	r3, r3, #25
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	0f5b      	lsrs	r3, r3, #29
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039fe:	7bbb      	ldrb	r3, [r7, #14]
 8003a00:	7b3a      	ldrb	r2, [r7, #12]
 8003a02:	4911      	ldr	r1, [pc, #68]	; (8003a48 <UARTEx_SetNbDataToProcess+0x94>)
 8003a04:	5c8a      	ldrb	r2, [r1, r2]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a0a:	7b3a      	ldrb	r2, [r7, #12]
 8003a0c:	490f      	ldr	r1, [pc, #60]	; (8003a4c <UARTEx_SetNbDataToProcess+0x98>)
 8003a0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	7b7a      	ldrb	r2, [r7, #13]
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <UARTEx_SetNbDataToProcess+0x94>)
 8003a22:	5c8a      	ldrb	r2, [r1, r2]
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a28:	7b7a      	ldrb	r2, [r7, #13]
 8003a2a:	4908      	ldr	r1, [pc, #32]	; (8003a4c <UARTEx_SetNbDataToProcess+0x98>)
 8003a2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	08003b14 	.word	0x08003b14
 8003a4c:	08003b1c 	.word	0x08003b1c

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4d0d      	ldr	r5, [pc, #52]	; (8003a88 <__libc_init_array+0x38>)
 8003a54:	4c0d      	ldr	r4, [pc, #52]	; (8003a8c <__libc_init_array+0x3c>)
 8003a56:	1b64      	subs	r4, r4, r5
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	2600      	movs	r6, #0
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	4d0b      	ldr	r5, [pc, #44]	; (8003a90 <__libc_init_array+0x40>)
 8003a62:	4c0c      	ldr	r4, [pc, #48]	; (8003a94 <__libc_init_array+0x44>)
 8003a64:	f000 f820 	bl	8003aa8 <_init>
 8003a68:	1b64      	subs	r4, r4, r5
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	42a6      	cmp	r6, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a78:	4798      	blx	r3
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a82:	4798      	blx	r3
 8003a84:	3601      	adds	r6, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	08003b2c 	.word	0x08003b2c
 8003a8c:	08003b2c 	.word	0x08003b2c
 8003a90:	08003b2c 	.word	0x08003b2c
 8003a94:	08003b30 	.word	0x08003b30

08003a98 <memset>:
 8003a98:	4402      	add	r2, r0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memset+0xa>
 8003aa0:	4770      	bx	lr
 8003aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa6:	e7f9      	b.n	8003a9c <memset+0x4>

08003aa8 <_init>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_fini>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr
